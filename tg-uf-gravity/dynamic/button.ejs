'use client'
<%_ let nodesElementInfo = data.elementInfo _%>
<%_ let nodes = data _%>
<%_ let ufKey = data1[0].ufKey _%>
<%_ let pfKey = data1[0].pfKey _%>
<%_ let sfKey = data1[0].sfKey _%>
<%_ let stateAndSetStatePre = data1[3] _%>
<%_ let eventDetailsArray = data1[1] _%>
<%_ let eventDetailsObj = data1[2] _%>
<%_ let compDetailsLabel = data2 _%>
import React, { useState } from 'react'
import {Button,Container} from "@gravity-ui/uikit";
import i18n from '@/app/components/i18n';
import { useInfoMsg } from '@/app/torusStaticHandlers/infoMsgHandler';
import { uf_getPFDetailsDto,uf_initiatePfDto,te_eventEmitterDto,uf_ifoDto,te_updateDto } from '@/app/interfaces/interfaces';
<%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
  <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
import { ActionTooltip } from '@gravity-ui/uikit';
  <%_ } _%>
<%_ } _%>
import decodeToken from '@/app/components/decodeToken';
import { AxiosService } from '@/app/components/axiosService';
import { getCookie } from '@/app/components/cookieMgment';
import { nullFilter } from '@/app/utils/nullDataFilter';
<%_ for(let i=0;i<nodesElementInfo.props.length;i++){_%>
<%_ if(nodesElementInfo.props[i].name === 'isIconOnly' && nodesElementInfo.props[i].value){_%>
import { <%= nodesElementInfo.props[i].icon  %> } from 'react-icons/fa'
<%_ } _%>
<%_ } _%>

const Button<%= nodes.label %> =  ({  <%_ for(let i=0;i<stateAndSetStatePre.length;i++) { _%> <%= Object.keys(stateAndSetStatePre[i])[0] %>, <%= stateAndSetStatePre[i][Object.keys(stateAndSetStatePre[i])[0]], %>,<%_} _%>lockedData,setLockedData,primaryTableData, setPrimaryTableData,checkToAdd,setCheckToAdd,refetch,setRefetch<%_ if(pfKey !== '') {_%> <%_ } _%>}: { lockedData:any,setLockedData:any,checkToAdd:any,setCheckToAdd:any,refetch:any,setRefetch:any,primaryTableData:any,setPrimaryTableData:any,<%_ for(let i=0;i<stateAndSetStatePre.length;i++) { _%> <%= Object.keys(stateAndSetStatePre[i])[0] %>:any, <%= stateAndSetStatePre[i][Object.keys(stateAndSetStatePre[i])[0]] %>:any,<%_} _%><%_ if(pfKey !== '') {_%><%_ } _%>}) => {
  const keyset:any=i18n.keyset("language")
  const toast:any=useInfoMsg()
  <%_if(eventDetailsArray !== '' && eventDetailsObj !== '' && pfKey !== '' ){_%>
  const token:string = getCookie('token');
  let dfKey: string | any
  const decodedTokenObj:any = decodeToken(token);
  const createdBy:string =decodedTokenObj.users;
  const lockMode:any = lockedData.lockMode;
  const [loading, setLoading] = useState(false)
  const sessionInfo:any = {
    accessToken: token,
    authToken: ''
  }
  let event:any
  <%_if(eventDetailsArray[1]){  _%>
  event= '<%= eventDetailsArray[1].name %>'
   <%_ } _%>
  const handleClick = async () => {
    let saveCheck=false
    Object.keys(checkToAdd).map((item)=>{
      if(checkToAdd[item] == true){
        saveCheck=true
    }})
    if (saveCheck) {   
      toast('Error found', 'danger')
      return
    }
    try{
      const uf_dfKey = await AxiosService.get(
        "/UF/dfKey?ufKey=<%= ufKey %>&groupName=<%= compDetailsLabel  %>",
          {
            headers: {
              Authorization: `Bearer ${token}`
            }
          }
        )
      if(uf_dfKey?.data?.error == true){
       // toast(uf_dfKey?.data?.errorDetails?.message, 'danger')
       dfKey = getCookie('dfKey')[0]
      }else{

        dfKey = uf_dfKey?.data
      }
      let uf_initiatePf:any
      let te_eventEmitterBody:te_eventEmitterDto
      let primaryKey:any
      let uf_getPFDetails:any
      let uf_ifo:any
      let lockedKeysLength:number
      const uf_getPFDetailsBody:uf_getPFDetailsDto={
        key:"<%=ufKey %>",
        groupName:"<%= compDetailsLabel%>",
        controlName:"<%= nodesElementInfo.label%>",
        isTable:false
      }
      uf_getPFDetails =  await AxiosService.post("/UF/getPFDetails",uf_getPFDetailsBody,{
        headers: {
            'Content-Type': 'application/json'
          },
        }
      )
      if (uf_getPFDetails.data.key != undefined) {
           const uf_initiatePfBody:uf_initiatePfDto={
            key:uf_getPFDetails.data.key,
          }
              uf_initiatePf = await AxiosService.post("/UF/InitiatePF",uf_initiatePfBody,
                { headers: {
                  'Content-Type': 'application/json'
                }, })
                if(uf_initiatePf?.data?.error == true){
                  toast(uf_initiatePf?.data?.errorDetails?.message, 'danger')
                  return
                }
       
      } else {
        uf_initiatePf= {
          data:{
            nodeProperty:'',
            eventProperty:''
          }
        }
      }
      
      <%_ let eventSet = new Set(); _%>
      <%_ let eventObj = eventDetailsObj _%>
      <%_ for (let i = 0; i < eventDetailsArray.length; i++) { _%>
        
      <%_ let eventId = eventDetailsArray[i].id _%>
      <%_ if (eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'saveHandler') { _%>
        // saveHandler
     
      let te_saveBody:te_eventEmitterDto ={
        ...uf_initiatePf.data.nodeProperty}
      let eventData:any = {status:uf_initiatePf.data.eventProperty.sourceStatus,
        created_by:createdBy,
        modified_by:createdBy
      }

      if (uf_getPFDetails.data.key != undefined) {
        const uf_ifoBody:uf_ifoDto={
          formData:<%=compDetailsLabel%>Data,
          key:uf_getPFDetails.data.key,
          groupName:"<%= compDetailsLabel%>",
          controlName:"<%= nodesElementInfo.label%>"
        }
        uf_ifo = await AxiosService.post(
        "/UF/ifo",
          uf_ifoBody,
          {
            headers: {
              'Content-Type': 'application/json'
            }
          }
        )
        if(uf_ifo?.data?.error == true){
          toast(uf_ifo?.data?.errorDetails?.message, 'danger')
          return
        }
        te_saveBody.data = {...uf_ifo?.data,...eventData}
        te_saveBody.event = uf_initiatePf.data.eventProperty.sourceStatus
        te_saveBody.key= te_saveBody.key.slice(0, te_saveBody.key.lastIndexOf(':')) + ':';
      }else{
        te_saveBody.data = <%=compDetailsLabel%>Data

      }
      te_saveBody.data=nullFilter(te_saveBody.data)
      te_saveBody.url = uf_getPFDetails.data.url;
      primaryKey = uf_getPFDetails.data.primaryKey;
      const te_save = await AxiosService.post("/handler/save",te_saveBody,{
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`
          },
        }
      )

    if(te_save?.data?.error == true){
      toast(te_save?.data?.errorDetails?.message, 'danger')
      return
    }

    if (uf_getPFDetails.data.key != undefined) {
    let te_updateBody:te_updateDto ={};
    te_updateBody.data = [{status:te_save.data.event,'modified_by':createdBy,process_id:te_save.data.upId}]
    te_updateBody.key = dfKey
    te_updateBody.upId = te_save.data.upId
    te_updateBody.tableName = uf_getPFDetails.data.url.split('/')[3]

    if (Array.isArray(te_save.data.insertedData)) {
      let primaryKeys:any[]=[];
      for (let i = 0; i < te_save.data.insertedData; i++) {
        primaryKeys.push(te_save.data.insertedData[i].primaryKey)
      }
      te_updateBody.primaryKey = primaryKeys
    }
    if (typeof te_save.data.insertedData === 'object') {
      te_updateBody.primaryKey = [te_save.data.insertedData[primaryKey]]
    }

    te_updateBody.url = process.env.NEXT_PUBLIC_API_URL

    const te_update:any=await AxiosService.post("/handler/update",te_updateBody,{
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${token}`
      }
    })

    if (te_update && te_update?.status) {
      toast('data updated successfully', 'success')
    }

    if(te_update?.data?.error == true){
      toast(te_update?.data?.errorDetails?.message, 'danger')
      return
    }
  }

    let keys: any = {}
    Object.keys(<%= compDetailsLabel%>Data).map((item: any) => {
      keys[item] = ''
    })
    set<%= compDetailsLabel%>Data(keys)
    <%_ } _%>
    <%_ if (eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'setFormData') { _%>
        // setFormData

        set<%= compDetailsLabel%>Data(te_save.data.result)


    <%_ } _%>
    <%_ if (eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'updateHandler') { _%>
        // updateHandler
        
      te_eventEmitterBody = {
        ...uf_initiatePf.data.nodeProperty,
        data:{"value":uf_getPFDetails.data.status},
        upId : lockedData.processIds,
        event : uf_initiatePf.data.eventProperty.sourceStatus
      }
      let keys: any = {}
      Object.keys(<%= compDetailsLabel%>Data).map((item: any) => {
        keys[item] = ''
      })
      set<%= compDetailsLabel%>Data(keys)

      const te_eventEmitter=await AxiosService.post("/te/eventEmitter",te_eventEmitterBody,
        { headers: {Authorization: `Bearer ${token}`}})
        if(te_eventEmitter?.data?.error == true){
          toast(te_eventEmitter?.data?.errorDetails?.message, 'danger')
          return
        }
      lockedKeysLength = lockedData.primaryKeys.length;
      let te_updateBody:any ={};
      te_updateBody.data = [];
      let toUpdatedData = {status:uf_getPFDetails.data.status,'modified_by':createdBy}
      for (let i = 0; i < lockedKeysLength; i++) {
        te_updateBody.data.push(toUpdatedData)        
      }
      te_updateBody.key = dfKey
      te_updateBody.upId = lockedData.processIds
      te_updateBody.tableName = uf_getPFDetails.data.tableName
      te_updateBody.primaryKey = lockedData.primaryKeys
      te_updateBody.url = process.env.NEXT_PUBLIC_API_URL
      if(lockMode.lockMode === 'Single' || lockMode.lockMode === 'Multi'){
        te_updateBody.lockDetails = {ttl: +lockedData.ttl}
      }

      const te_update:any =await AxiosService.post("/handler/update",te_updateBody,{
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        }
      })
      
      if (te_update && te_update?.status) {
        toast('data updated successfully', 'success')
      }
    <%_ } _%>
    <%_ if (eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'infoMsg') { _%>
      // infoMsg
      toast('<%= eventDetailsArray[i].hlr.params.message %>', '<%= eventDetailsArray[i].hlr.params.type %>')
    <%_ } _%>
    <%_ } _%>
      setRefetch((pre: any) => !pre)
    }catch (err: any) {
      toast(err?.response?.data?.errorDetails?.message, 'danger')
      setLoading(false)
    }
  }
<%_}else{ _%>
  const handleClick = () => {
    console.log('Clicked',<%= compDetailsLabel+"Data"%>);
  }
<%_}_%>
<%_ let columnStart = nodes.grid.column.start  _%>  
<%_ let columnEnd = nodes.grid.column.end  _%>
<%_ let rowStart = nodes.grid.row.start  _%>
<%_ let rowEnd = nodes.grid.row.end  _%>
<%_ let gap = nodes.grid.style.gap  _%>
  return (
    <div className="col-start-<%= columnStart %> col-end-<%= columnEnd %> row-start-<%= rowStart %> row-end-<%= rowEnd %> gap-<%= gap %>" >
      <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
        <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
      <ActionTooltip <%_ for(let j=0;j<nodesElementInfo.props[i].tooltipProps.length;j++) { _%><%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "title" && nodesElementInfo.props[i].tooltipProps[j].value !== ""){ _%><%= ' '  %>title="<%= nodesElementInfo.props[i].tooltipProps[j].value %>"<%_ } _%> <%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "placement" && nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue.length){ _%><%_ %><%= ' '  %>placement="<%= nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue[0] %>"<%_ } _%><%_ } _%>>
          <%_ } _%>
      <%_ } _%>
        <Button 
          className="w-full"
          onClick={handleClick}
        <%_ for(let i=0;i<nodesElementInfo.props.length;i++){_%>
        <%_ if(nodesElementInfo.props[i].name === 'view' && nodesElementInfo.props[i].enum.selectedValue.length ){_%> 
          view='<%= nodesElementInfo.props[i].enum.selectedValue[0] %>'
        <%_ } _%>
        <%_ if(nodesElementInfo.props[i].name === 'size' && nodesElementInfo.props[i].enum.selectedValue.length){ _%>  
          size='<%= nodesElementInfo.props[i].enum.selectedValue[0]  %>'           
        <%_ } _%> 
        <%_ if(nodesElementInfo.props[i].name === 'disabled' && nodesElementInfo.props[i].enum.selectedValue.length ){_%>
          disabled={<%= nodesElementInfo.props[i].enum.selectedValue[0] %>}
        <%_ } _%>
        <%_ if(nodesElementInfo.props[i].name === 'pin' && nodesElementInfo.props[i].enum.selectedValue.length ){ _%> 
          pin='<%=nodesElementInfo.props[i].enum.selectedValue[0] %>'
        <%_ } _%>
        <%_ } _%>
        >
        <%_ for(let i=0;i<nodesElementInfo.props.length;i++){_%>
          <%_ if( nodesElementInfo.props[i].name === 'icon' && nodesElementInfo.props[i].value !== "true"){ _%>     
          {keyset("<%= nodesElementInfo.label.toLowerCase() %>")}
          <%_ } else if(nodesElementInfo.props[i].name === 'icon' && nodesElementInfo.props[i].value === "true"){_%>
            {< <%= nodesElementInfo.props[i].icon %>/>}
          <%_ } _%>
          <%_ } _%> 
        </Button>
      <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
          <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
      </ActionTooltip>
          <%_ } _%>
      <%_ } _%>
    </div>
  )
}
export default Button<%= nodes.label %>