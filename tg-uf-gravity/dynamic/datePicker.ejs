'use client'
<%_ let nodesElementInfo = data.elementInfo _%>
<%_ let nodes = data _%>
<%_ let ufKey = data1[0].ufKey _%>
<%_ let pfKey = data1[0].pfKey _%>
<%_ let sfKey = data1[0].sfKey _%>
<%_ let eventDetailsArray = data1[1] _%>
<%_ let eventDetailsObj = data1[2] _%>
<%_ let compDetailsLabel = data2 _%>
<%_ let stateAndSetStatePre =data1[3] _%>
import React from 'react'
import {DatePicker} from '@gravity-ui/date-components';
import { dateTimeParse } from '@gravity-ui/date-utils';
import i18n from '@/app/components/i18n';

<%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
<%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0]==='true'){ _%>
import { ActionTooltip } from '@gravity-ui/uikit';
<%_ } _%>
<%_ } _%>

const DatePicker<%=nodes.label %> = ({<%_ for(let i=0;i<stateAndSetStatePre.length;i++) { _%> <%= Object.keys(stateAndSetStatePre[i])[0] %>, <%= stateAndSetStatePre[i][Object.keys(stateAndSetStatePre[i])[0]] %>,<%_} _%>checkToAdd,setCheckToAdd,refetch,setRefetch}:any) => {
<%_ let columnStart = nodes.grid.column.start  _%>  
<%_ let columnEnd = nodes.grid.column.end  _%>
<%_ let rowStart = nodes.grid.row.start  _%>
<%_ let rowEnd = nodes.grid.row.end  _%>
<%_ let gap = nodes.grid.style.gap  _%>
const handleChange = (date: any) => {
  const selectedDate = new Date(date);
  const IST_OFFSET = 5.5 * 60 * 60 * 1000; 
  const indiaTime = new Date(selectedDate.getTime() + IST_OFFSET);
  const isoDate = indiaTime.toISOString();
  <%= "set"+compDetailsLabel+"Data"%>((prev: any) => ({ ...prev, <%=nodes.label.toLowerCase() %>: isoDate }))
}
const keyset:any=i18n.keyset("language")
return (
  <div className="col-start-<%= columnStart %> col-end-<%= columnEnd %> row-start-<%= rowStart %> row-end-<%= rowEnd %> gap-<%= gap %>" >
  <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
  <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0]==='true'){ _%>
  <ActionTooltip <%_ for(let j=0;j<nodesElementInfo.props[i].tooltipProps.length;j++) { _%><%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "title" && nodesElementInfo.props[i].tooltipProps[j].value !== ""){ _%><%= ' '  %>title="<%= nodesElementInfo.props[i].tooltipProps[j].value %>"<%_ } _%> <%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "placement" && nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue.length){ _%><%_ %><%= ' '  %>placement="<%= nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue[0] %>"<%_ } _%><%_ } _%>>
  <%_ } _%>
  <%_ } _%>
  <DatePicker
    label={keyset("<%= nodesElementInfo.label %>")}
    value={<%= compDetailsLabel+"Data"%>.<%= nodes.label.toLowerCase() %>==null || <%= compDetailsLabel+"Data"%>.<%= nodes.label.toLowerCase() %>==""? null:dateTimeParse(<%= compDetailsLabel+"Data"%>.<%= nodes.label.toLowerCase() %>)}
    onUpdate= {handleChange}
    <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
    <%_ if(nodesElementInfo.props[i].name === "disabled"&& nodesElementInfo.props[i].enum.selectedValue.length){ _%>
    disabled={<%= nodesElementInfo.props[i].enum.selectedValue[0] %>}
    <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name === "readOnly"&& nodesElementInfo.props[i].enum.selectedValue.length){ _%>
    readOnly={<%= nodesElementInfo.props[i].enum.selectedValue[0] %>}
    <%_ } _%>
    <%_ if(nodesElementInfo.props[i].name === "size"&& nodesElementInfo.props[i].enum.selectedValue.length){ _%>
    size='<%= nodesElementInfo.props[i].enum.selectedValue[0] %>'
    <%_ } _%>
    <%_ } _%>
    />
    <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
    <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0]==='true'){ _%>
  </ActionTooltip>
    <%_ } _%>
    <%_ } _%>
  </div>
  )
}
export default DatePicker<%=nodes.label %>