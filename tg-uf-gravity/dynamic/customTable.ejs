"use client"
<%_ let nodesElementInfo = data.elementInfo _%>
<%_ let parentTable = data.elementInfo.parentTable _%>
<%_ let parentTableId = data.elementInfo.parentTableId _%>
<%_ let isChildTable = false _%>
<%_ if (parentTable !== '' && parentTableId !== '' ) { _%>
  <%_ isChildTable = true _%>
<%_ } _%>
<%_ let coloumns = relation _%>
<%_ let nodes = data  _%>
<%_ let ufKey = data1[0].ufKey _%>
<%_ let pfKey = data1[0].pfKey _%>
<%_ let sfKey = data1[0].sfKey _%>
<%_ let stateAndSetStatePre = data1[3] _%>
<%_ let eventDetailsArray = data1[1] _%>
<%_ let eventDetailsObj = data1[2] _%>
<%_ let compDetailsLabel = data2 _%>
<%_ let Pagination = false;  _%>
<%_ let Search = false;  _%>
<%_ let TableActions = false;  _%>
<%_ let TableSelection = false;  _%>
<%_ let TableSettings = false;  _%>
<%_ let TableSorting = false;  _%>
<%_ let needLocking = false;  _%>
<%_ let formDataTableName=""; _%>
import {
  Col,
  Flex,
  Row,
} from '@gravity-ui/uikit'
import { SquareXmark } from '@gravity-ui/icons'
import { Button, Icon, TextInput } from '@gravity-ui/uikit'
import React, { useEffect,useState } from 'react'
import { uf_getPFDetailsDto,uf_initiatePfDto,te_eventEmitterDto,uf_ifoDto,te_updateDto } from '@/app/interfaces/interfaces';
import { useInfoMsg } from '@/app/torusStaticHandlers/infoMsgHandler';
import decodeToken from '@/app/components/decodeToken';
import { AxiosService } from '@/app/components/axiosService'
import { getCookie } from '@/app/components/cookieMgment'
import { DatePicker } from '@gravity-ui/date-components'
import { dateTimeParse } from '@gravity-ui/date-utils'
import { IoAdd } from 'react-icons/io5'
import { nullFilter } from '@/app/utils/nullDataFilter';
import i18n from '@/app/components/i18n';
import { codeExecution } from '@/app/utils/codeExecution'
let defaultColumns = 
<%- JSON.stringify(relation, null, 2)  %> ;

  for (let i = 0; i < defaultColumns.length; i++) {
    defaultColumns[i].id = defaultColumns[i].id.toLowerCase();
  }
  <%_ let columnStart = nodes.grid.column.start  _%>  
  <%_ let columnEnd = nodes.grid.column.end  _%>
  <%_ let rowStart = nodes.grid.row.start  _%>
  <%_ let rowEnd = nodes.grid.row.end  _%>
  <%_ let gap = nodes.grid.style.gap  _%>
function generateUniqueCode() {
  const timestamp = new Date().getTime() // Current timestamp in milliseconds
  const randomValue = Math.random().toString(36).substring(2, 8) // Random alphanumeric string of length 6
  return `${timestamp}-${randomValue}`
}
const Table<%= nodes.label %>=({ <%_ for(let i=0;i<stateAndSetStatePre.length;i++) { _%> <%= Object.keys(stateAndSetStatePre[i])[0] %>, <%= stateAndSetStatePre[i][Object.keys(stateAndSetStatePre[i])[0]] %>,<%_} _%>lockedData,setLockedData,primaryTableData, setPrimaryTableData,refetch, setRefetch,setData }: any)=>{
  const keyset:any=i18n.keyset("language")
  const [tableData, setTableData] = useState<any>([])
 
  set<%= compDetailsLabel %>Data(tableData) %>
  const [selectedRows, setSelectedRows] = useState<any>([])
  let getDataPKey:any=""
  let getDataPTable:any=""
  const toast:any=useInfoMsg()
  let isGetFormdata = false;
  const handleCheckboxChange = (row: { <%= nodesElementInfo.primaryKey  %>: any }) => {
    const isSelected = selectedRows.some(
      (selectedRow: { <%= nodesElementInfo.primaryKey  %>: any }) => selectedRow.<%= nodesElementInfo.primaryKey  %> === row.<%= nodesElementInfo.primaryKey  %>
    )

    if (isSelected) {
      setSelectedRows((prevSelected: any) =>
        prevSelected.filter(
          (selectedRow: { <%= nodesElementInfo.primaryKey  %>: any }) => selectedRow.<%= nodesElementInfo.primaryKey  %> !== row.<%= nodesElementInfo.primaryKey  %>
        )
      )
    } else {
      setSelectedRows([...selectedRows, row])
    }
  }

  const token:string = getCookie('token');
  const dfKey:string = getCookie('dfKey');
  const decodedTokenObj:any = decodeToken(token);
  const createdBy:string =decodedTokenObj.users;
  const lockMode:any = lockedData.lockMode;
  const [loading, setLoading] = useState(false)
  const sessionInfo:any = {
    accessToken: token,
    authToken: ''
  }

  const handleSave= async ()=>{
    let parentData: any = nullFilter(primaryTableData.parentData)
    let childData: any = []
    const code = await AxiosService.post('/UF/code', {
      key: '<%= ufKey  %>',
      group: '<%= compDetailsLabel%>'
    })
  
    if (code?.data?.error == true) { 
      toast(code?.data?.errorDetails?.message, 'danger')
      return
    }else{
      if (code?.data !="" ) {
        let codeStates: any = {}
        <%_ for(let i=0;i<stateAndSetStatePre.length;i++) { _%> 
        codeStates['<%= Object.keys(stateAndSetStatePre[i])[0].replace("Data","") %>'] =  <%= Object.keys(stateAndSetStatePre[i])[0] %>;
        codeStates['<%= stateAndSetStatePre[i][Object.keys(stateAndSetStatePre[i])[0]].replace("Data","")%>'] = <%= stateAndSetStatePre[i][Object.keys(stateAndSetStatePre[i])[0]]%>;
        <%_} _%>

        codeExecution(code.data,codeStates)
      }
  
    }

    tableData.map((item:any)=>{
      
      childData.push(nullFilter(item))
    })
   // console.log('parentData', parentData)
   // console.log('childData', childData)
  /////////////////////////////////
    try{
      let uf_initiatePf:any
      let te_eventEmitterBody:te_eventEmitterDto
      let primaryKey:any
      let uf_getPFDetails:any
      let uf_ifo:any
      let lockedKeysLength:number
      const uf_getPFDetailsBody:uf_getPFDetailsDto={
        key:"<%=ufKey %>",
        groupName:"<%= compDetailsLabel%>",
        controlName:"<%= nodesElementInfo.label%>",
        isTable: true
      }
      uf_getPFDetails =  await AxiosService.post("/UF/getPFDetails",uf_getPFDetailsBody,{
        headers: {
            'Content-Type': 'application/json'
          },
        }
      )
      if ( uf_getPFDetails?.data?.error == true) {
        toast(uf_getPFDetails?.data?.errorDetails?.message, 'danger')
        return
      }

      if (uf_getPFDetails.data.key != undefined) {
        const uf_initiatePfBody:uf_initiatePfDto={
                      key:uf_getPFDetails.data.key,
                      }
           uf_initiatePf = await AxiosService.post("/UF/InitiatePF",uf_initiatePfBody,
             { headers: {
               'Content-Type': 'application/json'
             }, })
             if(uf_initiatePf?.data?.error == true){
               toast(uf_initiatePf?.data?.errorDetails?.message, 'danger')
               return
             }
    
        } else {
        uf_initiatePf= {
          data:{
            nodeProperty:'',
            eventProperty:''
          }
        }
      }

  <%_ let eventSet = new Set(); _%>
  <%_ let eventObj = eventDetailsObj _%>
  <%_ for (let i = 0; i < eventDetailsArray.length; i++) { _%>
    
  <%_ let eventId = eventDetailsArray[i].id _%>
  <%_ if (eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'saveHandler') { _%>
    // saveHandler
 
  let te_saveBody:te_eventEmitterDto ={
    ...uf_initiatePf.data.nodeProperty}
  let eventData:any = {status:uf_initiatePf.data.eventProperty.sourceStatus,
    created_by:createdBy,
    modified_by:createdBy
  }

   if (uf_getPFDetails.data.key != undefined) {
    //   const uf_ifoBody:uf_ifoDto={
    //     formData:<%=compDetailsLabel%>Data,
    //     key:uf_getPFDetails.data.key,
    //     groupName:"<%= compDetailsLabel%>",
    //     controlName:"<%= nodesElementInfo.label%>"
    //   }
    //   uf_ifo = await AxiosService.post(
    //    "/UF/ifo",
    //     uf_ifoBody,
    //     {
    //       headers: {
    //         'Content-Type': 'application/json'
    //       }
    //     }
    //   )
    //   if(uf_ifo?.data?.error == true){
    //     toast(uf_ifo?.data?.errorDetails?.message, 'danger')
    //     return
    //   }
    //   te_saveBody.data = {...uf_ifo?.data,...eventData}
    //   te_saveBody.event = uf_initiatePf.data.eventProperty.sourceStatus
    //   te_saveBody.key= te_saveBody.key.slice(0, te_saveBody.key.lastIndexOf(':')) + ':';
    // }
    // else{
    //   te_saveBody.data = {
    //     parentData,
    //     childData
      }
    te_saveBody.event = uf_initiatePf.data.eventProperty.sourceStatus
    // }
    <%_ if (isChildTable) { _%>
      let filteredData :any=[];
    childData.map((item:any)=>{
      let temp=item;
      delete temp.<%= nodesElementInfo.primaryKey  %>;
      filteredData.push(temp)

    })

    te_saveBody.data = {
      parentData:nullFilter(parentData),
      childData:filteredData
    }
      
    <%_ } else { _%>
      let filteredData :any=[];
    childData.map((item:any)=>{
      let temp=item;
      delete temp.<%= nodesElementInfo.primaryKey  %>;
      filteredData.push(temp)

    })
    if (isGetFormdata){
      te_saveBody.data = {parentData,
        childData:filteredData,
        parentPrimaryKey:getDataPKey,
        parentTable:getDataPTable
      }
    }else {
      te_saveBody.data =nullFilter(filteredData)
    }
    <%_ } _%>  
  te_saveBody.url = uf_getPFDetails.data.url;
  primaryKey = uf_getPFDetails.data.primaryKey;
  
  const te_save = await AxiosService.post("/handler/save",te_saveBody,{
        headers: {
          'Content-Type': 'application/json',
          Authorization: `Bearer ${token}`
        },
      }
    )


if(te_save?.data?.error == true){
  toast(te_save?.data?.errorDetails?.message, 'danger')
  return
}

if (uf_getPFDetails.data.key != undefined) {
let te_updateBody:te_updateDto ={};
te_updateBody.data = [{status:te_save.data.event,'modified_by':createdBy,process_id:te_save.data.upId}]
te_updateBody.key = dfKey
te_updateBody.upId = te_save.data.upId
te_updateBody.tableName = getDataPTable
te_updateBody.primaryKey = [parentData[getDataPKey]]
te_updateBody.url = process.env.NEXT_PUBLIC_API_URL

const te_update:any=await AxiosService.post("/handler/update",te_updateBody,{
  headers: {
    'Content-Type': 'application/json',
    Authorization: `Bearer ${token}`
  }
})

if (te_update && te_update?.status) {
  toast('data updated successfully', 'success')
}

let tempkeys: any = {}
Object.keys(<%=formDataTableName%>Data).map((item: any) => {
  tempkeys[item] = ''
})
set<%=formDataTableName%>Data(tempkeys)
setTableData([])

if(te_update?.data?.error == true){
  toast(te_update?.data?.errorDetails?.message, 'danger')
  return
}
}
let keys: any = {}
Object.keys(<%= formDataTableName%>Data).map((item: any) => {
  keys[item] = ''
})
set<%= formDataTableName%>Data(keys)
<%_ } _%>
<%_ if (eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'getFormData') { _%>
//getFormData
  parentData = nullFilter(<%= eventDetailsArray[i+1].name %>Data)
  getDataPKey='<%= eventDetailsArray[i].hlr.params.primaryKey %>'
  getDataPTable='<%= eventDetailsArray[i].hlr.params.parentTable %>'
  isGetFormdata = true;
  <%_ formDataTableName=eventDetailsArray[i+1].name _%>
<%_ } _%>  
<%_ if (eventDetailsArray[i].type === 'handlerNode' && eventDetailsArray[i].name === 'infoMsg') { _%>
  // infoMsg
  toast('<%= eventDetailsArray[i].hlr.params.message %>', '<%= eventDetailsArray[i].hlr.params.type %>')
<%_ } _%>
<%_ } _%>
    }
    catch(err){
      console.log(err);
    }

  /////////////////////////////////

}

  const handleSelectAll = (event: { target: { checked: any } }) => {
    if (event.target.checked) {
      setSelectedRows(tableData) // Select all rows
    } else {
      setSelectedRows([]) // Deselect all rows
    }
  }

  const onRowDataChange = (
    rowIndex: number,
    newData: any,
    type: string,
    colunm?: any
  ) => {
    const updatedData = tableData.map((item: any) => {
      if (item.<%= nodesElementInfo.primaryKey  %> === rowIndex) {
        if (type === 'number') {
          if(newData.value.length > 0 && newData.value.startsWith('0')){
            newData.value = newData.value.slice(1);
          } 
          return {
            ...item,
            [newData.name]: +newData.value
          }
        } 
        else if (type == 'date') {
          const selectedDate = new Date(newData)
          const IST_OFFSET = 5.5 * 60 * 60 * 1000
          const indiaTime = new Date(selectedDate.getTime() + IST_OFFSET)
          const isoDate = indiaTime.toISOString()
          return {
            ...item,
            [colunm]: isoDate
          }
        } 
        else {
          return {
            ...item,
            [newData.name]: newData.value
          }
        }
      }
      return item
    })
    setTableData(updatedData)
  }
  const onDelete = (Indx: number) => {
    const updatedData = tableData.filter((item: any) => {
      if (item.<%= nodesElementInfo.primaryKey  %> != Indx) {
        return item
      }
    })
    setTableData(updatedData)
  }
  function addRow() {
    let newRow: any = {}
    defaultColumns.forEach(item => {
      if (item.id === '<%= nodesElementInfo.primaryKey  %>') {
        newRow['<%= nodesElementInfo.primaryKey  %>'] = generateUniqueCode()
      } else if (item.type === 'number') {
        newRow[item.id] = 0
      } else if (item.type === 'text') {
        newRow[item.id] = '' 
      } else if (item.type === 'date') {
        newRow[item.id] = null
      } else newRow[item.id] = ''
    })
    newRow[primaryTableData.primaryKey] = primaryTableData.value
    setTableData([newRow, ...tableData])
  }

  useEffect(() => {
    setTableData([])
  }, [primaryTableData.value])

  return (
    <div className="col-start-<%= columnStart %> col-end-<%= columnEnd %> row-start-<%= rowStart %> row-end-<%= rowEnd %> gap-<%= gap %> px-[0.7vw]">
      <Row space={3}>
        <Col>
          <Flex direction='column' >
            <div className='overflow-x-auto'>
              <div className='flex justify-end p-2'>
                <Button
                  title='Add Row'
                  onClick={addRow}
                  size='s'
                  className='flex transform items-center rounded-full bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700  font-medium text-white shadow-lg transition-all duration-300 ease-in-out hover:scale-105 hover:from-blue-600 hover:to-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300'
                >
                  <IoAdd size={18} />
                </Button>
              </div>
              <table className='min-w-full rounded-md border border-gray-200 bg-white'>
                <thead>
                  <tr className='border border-gray-200 text-sm leading-normal text-gray-600'>
                    {/* <th className='px-3 py-2 text-left'>
                      <input
                        type='checkbox'
                        className='h-4 w-4 rounded border-gray-300 text-blue-600 focus:ring-blue-500'
                        onChange={handleSelectAll}
                      />
                    </th> */}
                    {defaultColumns.map(
                      (column: any) =>
                        column?.id != '<%= nodesElementInfo.primaryKey  %>' && (
                          <th key={column.id} className='px-3 py-1 text-left'>
                            {keyset(column.name)}
                          </th>
                        )
                    )}
                  </tr>
                </thead>
                <tbody className='text-sm font-light text-gray-600'>
                  {tableData.map((row: any) => {
                    const isSelected = selectedRows.some(
                      (selectedRow: { <%= nodesElementInfo.primaryKey  %>: any }) => selectedRow.<%= nodesElementInfo.primaryKey  %> === row.<%= nodesElementInfo.primaryKey  %>
                    )
                    return (
                      <tr
                        key={row.<%= nodesElementInfo.primaryKey  %>}
                        className={`border-b border-gray-200 ${isSelected ? 'bg-orange-200' : 'hover:bg-gray-100'}`}
                      >
                      {/*<td className='px-3 py-1 text-left'>
                          <input
                            type='checkbox'
                            checked={isSelected}
                            onChange={() => handleCheckboxChange(row)}
                            className={`h-4 w-4 rounded-lg border-2 border-black  transition duration-150 ease-in-out focus:ring-2 ${isSelected ? 'bg-orange-200' : 'bg-gray-100'}`}
                          />
                        </td> */}
                        {defaultColumns.map(
                          (column: any) =>
                            column?.id != '<%= nodesElementInfo.primaryKey  %>' && column?.id != primaryTableData.primaryKey && (
                              <td key={column.id} className='px-3 py-1 text-left'>
                                {column.type == 'date' ? (
                                  row[column.id] != null ? (
                                    <DatePicker
                                      size='s'
                                      value={dateTimeParse(row[column.id])}
                                      onUpdate={event => {
                                        onRowDataChange(
                                          row['<%= nodesElementInfo.primaryKey  %>'],
                                          event,
                                          column.type,
                                          column.id
                                        )
                                      }}
                                    />
                                  ) : (
                                    <DatePicker
                                      size='s'
                                      onUpdate={event => {
                                        onRowDataChange(
                                          row['<%= nodesElementInfo.primaryKey  %>'],
                                          event,
                                          column.type,
                                          column.id
                                        )
                                      }}
                                    />
                                  )
                                  ) : (
                                  <TextInput
                                    value={row[column.id]}
                                    name={column.id}
                                    type={column.type}
                                    view='clear'
                                    onChange={event => {
                                      onRowDataChange(
                                        row['<%= nodesElementInfo.primaryKey  %>'],
                                        event.target,
                                        column.type
                                      )
                                    }}
                                  />
                                )}
                              </td>
                            )
                        )}
                        <td className='px-6 py-3 text-left'>
                          <Button size='s' onClick={() => onDelete(row.<%= nodesElementInfo.primaryKey  %>)}>
                            <Icon data={SquareXmark} size={18} />
                          </Button>
                        </td>
                      </tr>
                    )
                  })}
                </tbody>
              </table>
              {tableData.length == 0 && (
                <div className='flex w-full items-center justify-center p-2'>
                  {keyset("no data")}
                </div>
              )}
              <div className='flex justify-end p-2'>
                <Button
                  className='flex transform items-center rounded-full bg-gradient-to-r from-blue-500 via-blue-600 to-blue-700 px-5 py-3 font-medium text-white shadow-lg transition-all duration-300 ease-in-out hover:scale-105 hover:from-blue-600 hover:to-blue-800 focus:outline-none focus:ring-4 focus:ring-blue-300'
                  onClick={handleSave}
                  size='l'
                >
                {keyset("Save All")}
                </Button>
              </div>
            </div>
          </Flex>
        </Col>
      </Row>
    </div>
  )
}

export default Table<%= nodes.label %>;