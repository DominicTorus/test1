<%_ let nodesElementInfo = data.elementInfo _%>
<%_ let name = data.label _%>
<%_ let nodes = data _%>
<%_ let ufKey = data1[0].ufKey _%>
<%_ let pfKey = data1[0].pfKey _%>
<%_ let sfKey = data1[0].sfKey _%>
<%_ let stateAndSetStatePre = data1[3] _%>
<%_ let eventDetailsArray = data1[1] _%>
<%_ let eventDetailsObj = data1[2] _%>
<%_ let compDetailsLabel = data2 _%>
import React, { useState,useEffect } from "react";
<%_ if (nodesElementInfo.type === 'Dynamic-Api') { _%>
import axios from "axios";
<%_ } _%>
import {Select} from "@gravity-ui/uikit";
import i18n from '@/app/components/i18n';
<%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
  <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
import { ActionTooltip } from '@gravity-ui/uikit';
  <%_ } _%>
<%_ } _%>
import { AxiosService } from "@/app/components/axiosService";
import { getMapperDetailsDto } from "@/app/interfaces/interfaces";
import { useInfoMsg } from "@/app/torusStaticHandlers/infoMsgHandler";


const Dropdown<%=name %> = ({<%_ for(let i=0;i<stateAndSetStatePre.length;i++) { _%> <%= Object.keys(stateAndSetStatePre[i])[0] %>, <%= stateAndSetStatePre[i][Object.keys(stateAndSetStatePre[i])[0]] %>,<%_} _%>checkToAdd,setCheckToAdd,refetch,setRefetch}: any) => {
const keyset:any=i18n.keyset("language")
let getMapperDetails:any;
  <%_ if (nodesElementInfo.type.toLowerCase() === 'static') { _%>
const [selectedItem, setSelectedItem] = useState('<%=name.toLowerCase() %>');
  <%_ for (let i = 0; i < nodesElementInfo.props.length; i++) { _%>
    <%_ if (nodesElementInfo.props[i].name === 'items') { _%>
const items = [
  <%_ for (let j = 0; j < nodesElementInfo.props[i].items.length; j++) { _%>
    {
    action: () => setSelectedItem('<%= nodesElementInfo.props[i].items[j].text  %>'),
    key: '<%= nodesElementInfo.props[i].items[j].text  %>',
    text: '<%= nodesElementInfo.props[i].items[j].text  %>'
    },
  <%_ } _%>
  ];

    <%_ } _%>
  <%_ }  _%> 
  useEffect(() => {
    if (data?.<%=name.toLowerCase() %> == '') {
      setSelectedItem('<%=name.toLowerCase() %>')
    }
  }, [data?.<%=name.toLowerCase() %>])
  useEffect(() => {
    if (!selectedItem.includes('<%=name.toLowerCase() %>'))
    set<%=compDetailsLabel %>Data((prev: any) => ({ ...prev, <%=name.toLowerCase() %>: selectedItem }))
  }, [selectedItem])
  <%_ }else if(nodesElementInfo.type.toLowerCase() === 'dynamic'){ _%>
  const toast=useInfoMsg()
  const [<%=name %>Options, set<%=name %>Options] = useState<string[]>([]);
  let category : string
  <%_ for (let i = 0; i < nodesElementInfo.props.length; i++) { _%>
  <%_ if(nodesElementInfo.props[i].name === "filterProps"){ _%>
  category = "<%= nodesElementInfo.props[i].category %>";
  <%_ } _%>
  <%_ } _%>
  const getData = async()=>{
  const getMapperDetailsBody:getMapperDetailsDto={
    ufkey:"<%= ufKey %>",
    componentName:"<%= compDetailsLabel %>",
    controlName:"<%= name %>",
    category:category
  }
  try{
    getMapperDetails =  await AxiosService.post("/UF/getMapperDetails",getMapperDetailsBody,{
      headers: {
        'Content-Type': 'application/json'
      },
    }
    )
    if(getMapperDetails?.data?.error == true){
      toast(getMapperDetails?.data?.errorDetails?.message, 'danger')
      return
    }
    set<%=name %>Options(getMapperDetails.data);
    } catch (error) {
      console.error("Error fetching mapper details for dropdown:", error);
    }
  }
  useEffect(() => {
    getData()
  },[])
  const handlechange = (value: any) => {
    console.log("Selected value:", value);
    set<%=compDetailsLabel %>Data((prev: any) => ({ ...prev, <%=name.toLowerCase() %>: value[0] }))
  };
  <%_ }else if (nodesElementInfo.type === 'Dynamic-Api') { _%>
    const [selectedItem, setSelectedItem] = useState('<%=name.toLowerCase() %>');
  <%_ for (let i = 0; i < dnodesElementInfoata.props.length; i++) { _%>
  <%_ if (nodesElementInfo.props[i].name === 'items') { _%>
const [items, setItems] = useState<{ action: () => void; key: string; text: string }[]>([])

const fetch<%=name %> = async () => {
  try {
    const response = await axios.get('<%= nodesElementInfo.props[i].url  %>');
    const <%=name %>Data = response.data.map((<%=name.toLowerCase() %>:any) => ({
      action: () => setSelectedItem(<%= nodesElementInfo.props[i].code  %>),
      key: <%= nodesElementInfo.props[i].code  %>, 
      text: <%= nodesElementInfo.props[i].description  %>
    }));
    setItems(<%=name %>Data);
  } catch (error) {
    console.error(error);
  }
    };
  
    useEffect(() => {
      fetch<%=name %>();
    }, []);
    <%_ } _%>
    <%_ }  _%> 
    useEffect(() => {
      if (data?.<%=name.toLowerCase() %> == '') {
        setSelectedItem('<%=name.toLowerCase() %>')
      }
    }, [data?.<%=name.toLowerCase() %>])
    useEffect(() => {
      if (!selectedItem.includes('<%=name.toLowerCase() %>'))
      set<%=compDetailsLabel %>Data((prev: any) => ({ ...prev, <%=name.toLowerCase() %>: selectedItem }))
    }, [selectedItem])
  <%_ }else if(nodesElementInfo.type === 'Boolean'){ _%>
    const [selectedItem, setSelectedItem] = useState<boolean | null>(null);
    <%_ for (let i = 0; i < nodesElementInfo.props.length; i++) { _%>
      <%_ if (nodesElementInfo.props[i].name === 'items') { _%>
        const items = [{
          action: () => setSelectedItem(true),
          key: 'true',
          text: 'True'
        },
        {
          action: () => setSelectedItem(false),
          key: 'false',
          text: 'False'
        }
        ]
        <%_ } _%>
      <%_ } _%>
      {/*useEffect(() => {
        if (data?.<%=name.toLowerCase() %> == '') {
          setSelectedItem(null)
        }
      }, [data?.<%=name.toLowerCase() %>])*/}
      useEffect(() => {
        if (selectedItem !== null) {
        set<%=compDetailsLabel %>Data((prev: any) => ({ ...prev, <%=name.toLowerCase() %>: selectedItem }))
        }
      }, [selectedItem])
  <%_ }_%>  
  
  <%_ let columnStart = nodes.grid.column.start  _%>  
  <%_ let columnEnd = nodes.grid.column.end  _%>
  <%_ let rowStart = nodes.grid.row.start  _%>
  <%_ let rowEnd = nodes.grid.row.end  _%>
  <%_ let gap = nodes.grid.style.gap  _%>
  return (
    <div className="col-start-<%= columnStart %> col-end-<%= columnEnd %> row-start-<%= rowStart %> row-end-<%= rowEnd %> gap-<%= gap %>" >
      <%_ if (nodesElementInfo.type.toLowerCase() === 'dynamic') { _%>
        <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
          <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
        <ActionTooltip <%_ for(let j=0;j<nodesElementInfo.props[i].tooltipProps.length;j++) { _%><%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "title" && nodesElementInfo.props[i].tooltipProps[j].value !== ""){ _%><%= ' '  %>title="<%= nodesElementInfo.props[i].tooltipProps[j].value %>"<%_ } _%> <%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "placement" && nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue.length){ _%><%_ %><%= ' '  %>placement="<%= nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue[0] %>"<%_ } _%><%_ } _%>>
            <%_ } _%>
        <%_ } _%>
        <Select placeholder={keyset("<%= nodesElementInfo.label %>")} filterable={true} hasClear={true} onUpdate={handlechange}>
          {<%= name %>Options.map((option, index) => (
            <Select.Option key={index} value={option}>
              {option}
            </Select.Option>
          ))}
        </Select>
        <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
          <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
      </ActionTooltip>
          <%_ } _%>
      <%_ } _%>
      <%_ }else{ _%>
      <DropdownMenu
        renderSwitcher={(props) => (
          <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
            <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
          <ActionTooltip <%_ for(let j=0;j<nodesElementInfo.props[i].tooltipProps.length;j++) { _%><%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "title" && nodesElementInfo.props[i].tooltipProps[j].value !== ""){ _%><%= ' '  %>title="<%= nodesElementInfo.props[i].tooltipProps[j].value %>"<%_ } _%> <%_ if(nodesElementInfo.props[i].tooltipProps[j].name === "placement" && nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue.length){ _%><%_ %><%= ' '  %>placement="<%= nodesElementInfo.props[i].tooltipProps[j].enum.selectedValue[0] %>"<%_ } _%><%_ } _%>>
              <%_ } _%>
          <%_ } _%>
            <Button {...props} view="flat">
              {/*{keyset(selectedItem)}*/}
              {keyset(selectedItem !== null ? String(selectedItem) : '<%=nodesElementInfo.label %>')}
            </Button>
            <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
              <%_ if(nodesElementInfo.props[i].name === "needTooltip" && nodesElementInfo.props[i].enum.selectedValue.length && nodesElementInfo.props[i].enum.selectedValue[0] === "true"){ _%>
          </ActionTooltip>
              <%_ } _%>
          <%_ } _%>
        )}
        <%_ for(let i=0;i<nodesElementInfo.props.length;i++) { _%>
          <%_ if(nodesElementInfo.props[i].name==="items" && nodesElementInfo.props[i].title !== ""){ _%>
        items={items}
          <%_ } _%>
          <%_ } _%>
      />
    <%_ } _%>
    </div>
  );
};

export default Dropdown<%=name %>;
