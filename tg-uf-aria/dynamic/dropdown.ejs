import React, { useState,useEffect } from "react";
import TorusDropDown from '@/app/torusComponents/torusDropdown'
import {Dropdown, DropdownTrigger, DropdownMenu, DropdownItem, Button} from "@nextui-org/react";
<%_ if (data.type === 'Dynamic-Api') { _%>
import axios from "axios";
<%_ } _%>
 


const Dropdown<%=data.label %> = ({setUser}:any) => {
  <%_ if (data.type === 'static') { _%>
  <%_ for (let i = 0; i < data.props.length; i++) { _%>
    <%_ if (data.props[i].name === 'items') { _%>
      <%_ let dropdownItems = data.props[i].value.split(','); _%>
      const items = [
        <%_ for (let j = 0; j < dropdownItems.length; j++) { _%>
         {
          key: '<%= dropdownItems[j]  %>',
          label: '<%= dropdownItems[j]  %>'
         },
        <%_ } _%>
       ];
    <%_ } _%>
  <%_ }  _%> 
  <%_ }else if (data.type === 'Dynamic-Api') { _%>
  <%_ for (let i = 0; i < data.props.length; i++) { _%>
  <%_ if (data.props[i].name === 'items') { _%>
    const [items, setItems] = useState<{ key: string, label: string }[]>([]);

    const fetch<%=data.label %> = async () => {
      try {
        const response = await axios.get('<%= data.props[i].url  %>');
        const <%=data.label %>Data = response.data.map((<%=data.label.toLowerCase() %>:any) => ({
          key: <%= data.props[i].code  %>, 
          label: <%= data.props[i].description  %>
        }));
        setItems(<%=data.label %>Data);
      } catch (error) {
        console.error(error);
      }
    };
  
    useEffect(() => {
      fetch<%=data.label %>();
    }, []);
    <%_ } _%>
    <%_ }  _%> 
  <%_ }  _%>
  const [selectedItem, setSelectedItem] = useState('<%=data.label.toLowerCase() %>');
  useEffect(() => {
    const myArray = Array.from(selectedItem)
    setUser((prev: any) => ({ ...prev, <%=data.label.toLowerCase() %>: myArray[0] }))
  }, [selectedItem])
  return (
    <%_ let height = (relation.height/data2.height)*100   _%>  
    <%_ let width = (relation.width/data2.width)*100  _%>
    <%_ let left = (relation.position.x/data2.width)*100  _%>
    <%_ let top = (relation.position.y/data2.height)*100   _%>
    <%_ let mdHeight = height - (height*0.1)  _%>  
    <%_ let mdWidth = width - (width*0.1)  _%>
    <%_ let mdLeft = left - (left*0.1)  _%>
    <%_ let mdTop = top - (top*0.1)  _%>
    <%_ let smHeight = mdHeight - (mdHeight*0.1)  _%>  
    <%_ let smWidth = mdWidth - (mdWidth*0.1)  _%>
    <%_ let smLeft = mdLeft - (mdLeft*0.1)  _%>
    <%_ let smTop = mdTop - (mdTop*0.1)  _%>
    <%_ let xlHeight = height + (height*0.1)  _%>  
    <%_ let xlWidth = width + (width*0.1)  _%>
    <%_ let xlLeft = left + (left*0.1)  _%>
    <%_ let xlTop = top + (top*0.1)  _%>
    <div className="container">
    <TorusDropDown
            title={selectedItem}
            items={items}
            selected={selectedItem}
            setSelected={setSelectedItem}
            selectionMode='single'
            style={{
              maxHeight: '200px',
              overflowY: 'auto'
            }}
            classNames={{
              listBoxClassName: 'max-h-52 overflow-y-auto',
              buttonClassName:
                `w-[50px] h-[30px]  border-solid border-2 border-indigo-600 absolute left-[<%= left %>%] top-[<%= top %>%] h-[<%= height %>%] w-[<%= width %>%]   
                sm:left-[<%= smLeft %>%] sm:top-[<%= smTop %>%] sm:h-[<%= smHeight %>%] sm:w-[<%= smWidth %>%] 
                md:left-[<%= mdLeft %>%] md:top-[<%= mdTop %>%] md:h-[<%= mdHeight %>%] md:w-[<%= mdWidth %>%] 
                xl:left-[<%= xlLeft %>%] xl:top-[<%= xlTop %>%] xl:h-[<%= xlHeight %>%] xl:w-[<%= xlWidth %>%]`
            }}
          />
    </div>
  );
};

export default Dropdown<%=data.label %>;
